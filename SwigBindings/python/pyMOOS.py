# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyMOOS', [dirname(__file__)])
        except ImportError:
            import _pyMOOS
            return _pyMOOS
        if fp is not None:
            try:
                _mod = imp.load_module('_pyMOOS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyMOOS = swig_import_helper()
    del swig_import_helper
else:
    import _pyMOOS
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyMOOS.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyMOOS.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyMOOS.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyMOOS.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyMOOS.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyMOOS.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyMOOS.SwigPyIterator_copy(self)
    def next(self): return _pyMOOS.SwigPyIterator_next(self)
    def __next__(self): return _pyMOOS.SwigPyIterator___next__(self)
    def previous(self): return _pyMOOS.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyMOOS.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyMOOS.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyMOOS.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyMOOS.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyMOOS.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyMOOS.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyMOOS.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyMOOS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MOOSMSG_LIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MOOSMSG_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MOOSMSG_LIST, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyMOOS.MOOSMSG_LIST_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyMOOS.MOOSMSG_LIST___nonzero__(self)
    def __bool__(self): return _pyMOOS.MOOSMSG_LIST___bool__(self)
    def __len__(self): return _pyMOOS.MOOSMSG_LIST___len__(self)
    def pop(self): return _pyMOOS.MOOSMSG_LIST_pop(self)
    def __getslice__(self, *args): return _pyMOOS.MOOSMSG_LIST___getslice__(self, *args)
    def __setslice__(self, *args): return _pyMOOS.MOOSMSG_LIST___setslice__(self, *args)
    def __delslice__(self, *args): return _pyMOOS.MOOSMSG_LIST___delslice__(self, *args)
    def __delitem__(self, *args): return _pyMOOS.MOOSMSG_LIST___delitem__(self, *args)
    def __getitem__(self, *args): return _pyMOOS.MOOSMSG_LIST___getitem__(self, *args)
    def __setitem__(self, *args): return _pyMOOS.MOOSMSG_LIST___setitem__(self, *args)
    def append(self, *args): return _pyMOOS.MOOSMSG_LIST_append(self, *args)
    def empty(self): return _pyMOOS.MOOSMSG_LIST_empty(self)
    def size(self): return _pyMOOS.MOOSMSG_LIST_size(self)
    def clear(self): return _pyMOOS.MOOSMSG_LIST_clear(self)
    def swap(self, *args): return _pyMOOS.MOOSMSG_LIST_swap(self, *args)
    def get_allocator(self): return _pyMOOS.MOOSMSG_LIST_get_allocator(self)
    def begin(self): return _pyMOOS.MOOSMSG_LIST_begin(self)
    def end(self): return _pyMOOS.MOOSMSG_LIST_end(self)
    def rbegin(self): return _pyMOOS.MOOSMSG_LIST_rbegin(self)
    def rend(self): return _pyMOOS.MOOSMSG_LIST_rend(self)
    def pop_back(self): return _pyMOOS.MOOSMSG_LIST_pop_back(self)
    def erase(self, *args): return _pyMOOS.MOOSMSG_LIST_erase(self, *args)
    def __init__(self, *args): 
        this = _pyMOOS.new_MOOSMSG_LIST(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyMOOS.MOOSMSG_LIST_push_back(self, *args)
    def front(self): return _pyMOOS.MOOSMSG_LIST_front(self)
    def back(self): return _pyMOOS.MOOSMSG_LIST_back(self)
    def assign(self, *args): return _pyMOOS.MOOSMSG_LIST_assign(self, *args)
    def resize(self, *args): return _pyMOOS.MOOSMSG_LIST_resize(self, *args)
    def insert(self, *args): return _pyMOOS.MOOSMSG_LIST_insert(self, *args)
    def pop_front(self): return _pyMOOS.MOOSMSG_LIST_pop_front(self)
    def push_front(self, *args): return _pyMOOS.MOOSMSG_LIST_push_front(self, *args)
    def reverse(self): return _pyMOOS.MOOSMSG_LIST_reverse(self)
    __swig_destroy__ = _pyMOOS.delete_MOOSMSG_LIST
    __del__ = lambda self : None;
MOOSMSG_LIST_swigregister = _pyMOOS.MOOSMSG_LIST_swigregister
MOOSMSG_LIST_swigregister(MOOSMSG_LIST)

PI = _pyMOOS.PI

def MOOSGetValueFromToken(*args):
  """MOOSGetValueFromToken(STRING_LIST sParams, string sToken, string sVal) -> bool"""
  return _pyMOOS.MOOSGetValueFromToken(*args)

def GetNextAlogLineByMessageName(*args):
  """
    GetNextAlogLineByMessageName(std::istream Input, string sMessageName, double dfTime, 
        string sSource, string sPayload) -> bool
    """
  return _pyMOOS.GetNextAlogLineByMessageName(*args)

def DoubleVector2String(*args):
  """DoubleVector2String(std::vector<(double,std::allocator<(double)>)> V) -> string"""
  return _pyMOOS.DoubleVector2String(*args)

def MOOSRemoveChars(*args):
  """MOOSRemoveChars(string sStr, string sTok)"""
  return _pyMOOS.MOOSRemoveChars(*args)

def MOOSToUpper(*args):
  """MOOSToUpper(string str)"""
  return _pyMOOS.MOOSToUpper(*args)

def MOOSTrimWhiteSpace(*args):
  """MOOSTrimWhiteSpace(string str)"""
  return _pyMOOS.MOOSTrimWhiteSpace(*args)

def MOOSIsNumeric(*args):
  """MOOSIsNumeric(string str) -> bool"""
  return _pyMOOS.MOOSIsNumeric(*args)

def MOOSStrCmp(*args):
  """MOOSStrCmp(string s1, string s2) -> bool"""
  return _pyMOOS.MOOSStrCmp(*args)

def MOOSWildCmp(*args):
  """MOOSWildCmp(string sPattern, string sString) -> bool"""
  return _pyMOOS.MOOSWildCmp(*args)

def GetMOOSSkew():
  """GetMOOSSkew() -> double"""
  return _pyMOOS.GetMOOSSkew()

def SetMOOSSkew(*args):
  """SetMOOSSkew(double dfSkew)"""
  return _pyMOOS.SetMOOSSkew(*args)

def SetMOOSTimeWarp(*args):
  """SetMOOSTimeWarp(double dfWarp) -> bool"""
  return _pyMOOS.SetMOOSTimeWarp(*args)

def GetMOOSTimeWarp():
  """GetMOOSTimeWarp() -> double"""
  return _pyMOOS.GetMOOSTimeWarp()

def SetWin32HighPrecisionTiming(*args):
  """SetWin32HighPrecisionTiming(bool bEnable) -> bool"""
  return _pyMOOS.SetWin32HighPrecisionTiming(*args)

def MOOSGetch():
  """MOOSGetch() -> int"""
  return _pyMOOS.MOOSGetch()

def MOOSFormat(*args):
  """MOOSFormat(char FmtStr, v(...) *args) -> string"""
  return _pyMOOS.MOOSFormat(*args)

def MOOSFail(*args):
  """MOOSFail(char FmtStr, v(...) *args) -> bool"""
  return _pyMOOS.MOOSFail(*args)

def MOOSGetTimeStampString():
  """MOOSGetTimeStampString() -> string"""
  return _pyMOOS.MOOSGetTimeStampString()

def MOOSGetDate():
  """MOOSGetDate() -> string"""
  return _pyMOOS.MOOSGetDate()

def Progress(*args):
  """Progress(double dfPC)"""
  return _pyMOOS.Progress(*args)

def MOOSThirdPartyActuationString(*args):
  """MOOSThirdPartyActuationString(double pdfRudder, double pdfElevator, double pdfThrust) -> string"""
  return _pyMOOS.MOOSThirdPartyActuationString(*args)

def MOOSThirdPartyStatusString(*args):
  """MOOSThirdPartyStatusString(string sStatusCommand) -> string"""
  return _pyMOOS.MOOSThirdPartyStatusString(*args)

def MOOS_ANGLE_WRAP(*args):
  """MOOS_ANGLE_WRAP(double dfAng) -> double"""
  return _pyMOOS.MOOS_ANGLE_WRAP(*args)

def MOOSDeg2Rad(*args):
  """MOOSDeg2Rad(double dfDeg) -> double"""
  return _pyMOOS.MOOSDeg2Rad(*args)

def MOOSRad2Deg(*args):
  """MOOSRad2Deg(double dfRad) -> double"""
  return _pyMOOS.MOOSRad2Deg(*args)

def MOOSAbsLimit(*args):
  """MOOSAbsLimit(double dfVal, double dfLimit) -> bool"""
  return _pyMOOS.MOOSAbsLimit(*args)

def MOOSWhiteNoise(*args):
  """MOOSWhiteNoise(double Sigma) -> double"""
  return _pyMOOS.MOOSWhiteNoise(*args)

def MOOSNormalInv(*args):
  """MOOSNormalInv(double dfArea) -> double"""
  return _pyMOOS.MOOSNormalInv(*args)

def MOOSDiscreteUniform(*args):
  """MOOSDiscreteUniform(int nMin, int nMax) -> int"""
  return _pyMOOS.MOOSDiscreteUniform(*args)

def MOOSUniformRandom(*args):
  """MOOSUniformRandom(double dfMin, double dfMax) -> double"""
  return _pyMOOS.MOOSUniformRandom(*args)

def MOOSCreateDirectory(*args):
  """MOOSCreateDirectory(string sDirectory) -> bool"""
  return _pyMOOS.MOOSCreateDirectory(*args)

def MOOSFileParts(*args):
  """MOOSFileParts(string sFullPath, string sPath, string sFile, string sExtension) -> bool"""
  return _pyMOOS.MOOSFileParts(*args)

def IsLittleEndian():
  """IsLittleEndian() -> bool"""
  return _pyMOOS.IsLittleEndian()
class CMOOSFileReader(_object):
    """Proxy of C++ CMOOSFileReader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMOOSFileReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMOOSFileReader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CMOOSFileReader"""
        this = _pyMOOS.new_CMOOSFileReader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMOOS.delete_CMOOSFileReader
    __del__ = lambda self : None;
    def IsOpen(self):
        """IsOpen(self) -> bool"""
        return _pyMOOS.CMOOSFileReader_IsOpen(self)

    def GoTo(self, *args):
        """GoTo(self, string sLine) -> bool"""
        return _pyMOOS.CMOOSFileReader_GoTo(self, *args)

    def eof(self):
        """eof(self) -> bool"""
        return _pyMOOS.CMOOSFileReader_eof(self)

    def Reset(self):
        """Reset(self) -> bool"""
        return _pyMOOS.CMOOSFileReader_Reset(self)

    def GetValue(self, *args):
        """
        GetValue(self, string sName, string sResult) -> bool
        GetValue(self, string sName, double dfResult) -> bool
        GetValue(self, string sName, int nResult) -> bool
        GetValue(self, string sName, float fResult) -> bool
        GetValue(self, string sName, bool bResult) -> bool
        GetValue(self, string sName, unsigned int nResult) -> bool
        """
        return _pyMOOS.CMOOSFileReader_GetValue(self, *args)

    def SetFile(self, *args):
        """SetFile(self, string sFile) -> bool"""
        return _pyMOOS.CMOOSFileReader_SetFile(self, *args)

    def GetTokenValPair(*args):
        """
        GetTokenValPair(string sLine, string sTok, string sVal, bool bPreserveWhiteSpace = False) -> bool
        GetTokenValPair(string sLine, string sTok, string sVal) -> bool
        """
        return _pyMOOS.CMOOSFileReader_GetTokenValPair(*args)

    if _newclass:GetTokenValPair = staticmethod(GetTokenValPair)
    __swig_getmethods__["GetTokenValPair"] = lambda x: GetTokenValPair
    def GetNextValidLine(self, bDoShellSubstitution = True):
        """
        GetNextValidLine(self, bool bDoShellSubstitution = True) -> string
        GetNextValidLine(self) -> string
        """
        return _pyMOOS.CMOOSFileReader_GetNextValidLine(self, bDoShellSubstitution)

    def DoVariableExpansion(self, *args):
        """DoVariableExpansion(self, string sVal) -> bool"""
        return _pyMOOS.CMOOSFileReader_DoVariableExpansion(self, *args)

    def BuildLocalShellVars(self):
        """BuildLocalShellVars(self) -> bool"""
        return _pyMOOS.CMOOSFileReader_BuildLocalShellVars(self)

    def MakeOverloadedCopy(self, *args):
        """MakeOverloadedCopy(self, string sCopyName, std::map<(std::string,std::string,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,std::string)>)>)> OverLoads) -> bool"""
        return _pyMOOS.CMOOSFileReader_MakeOverloadedCopy(self, *args)

    def EnableVerbatimQuoting(self, bEnable = True):
        """
        EnableVerbatimQuoting(self, bool bEnable = True)
        EnableVerbatimQuoting(self)
        """
        return _pyMOOS.CMOOSFileReader_EnableVerbatimQuoting(self, bEnable)

CMOOSFileReader_swigregister = _pyMOOS.CMOOSFileReader_swigregister
CMOOSFileReader_swigregister(CMOOSFileReader)

def MOOSStrFind(*args):
  """
    MOOSStrFind(string sSource, string sToken, bool bInsensitive = False) -> size_t
    MOOSStrFind(string sSource, string sToken) -> size_t
    """
  return _pyMOOS.MOOSStrFind(*args)

def MOOSValFromString(*args):
  """
    MOOSValFromString(string sVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(string sVal, string sStr, string sTk) -> bool
    MOOSValFromString(double dfVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(double dfVal, string sStr, string sTk) -> bool
    MOOSValFromString(float fVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(float fVal, string sStr, string sTk) -> bool
    MOOSValFromString(long nVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(long nVal, string sStr, string sTk) -> bool
    MOOSValFromString(int nVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(int nVal, string sStr, string sTk) -> bool
    MOOSValFromString(bool bVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(bool bVal, string sStr, string sTk) -> bool
    MOOSValFromString(unsigned int nVal, string sStr, string sTk, bool bInsensitive = False) -> bool
    MOOSValFromString(unsigned int nVal, string sStr, string sTk) -> bool
    MOOSValFromString(std::vector<(double,std::allocator<(double)>)> dfValVec, 
        int nRows, int nCols, string sStr, string sToken, 
        bool bInsensitive = False) -> bool
    MOOSValFromString(std::vector<(double,std::allocator<(double)>)> dfValVec, 
        int nRows, int nCols, string sStr, string sToken) -> bool
    MOOSValFromString(std::vector<(unsigned int,std::allocator<(unsigned int)>)> nValVec, 
        int nRows, int nCols, string sStr, 
        string sToken, bool bInsensitive = False) -> bool
    MOOSValFromString(std::vector<(unsigned int,std::allocator<(unsigned int)>)> nValVec, 
        int nRows, int nCols, string sStr, 
        string sToken) -> bool
    """
  return _pyMOOS.MOOSValFromString(*args)

def MOOSVectorFromString(*args):
  """
    MOOSVectorFromString(string sStr, std::vector<(double,std::allocator<(double)>)> dfVecVal, 
        int nRows, int nCols) -> bool
    MOOSVectorFromString(string sStr, std::vector<(float,std::allocator<(float)>)> fValVec, 
        int nRows, int nCols) -> bool
    MOOSVectorFromString(string sStr, std::vector<(unsigned int,std::allocator<(unsigned int)>)> dfVecVal, 
        int nRows, int nCols) -> bool
    """
  return _pyMOOS.MOOSVectorFromString(*args)

def Write(*args):
  """
    Write(std::stringstream os, std::vector<(double,std::allocator<(double)>)> Vec) -> std::stringstream
    Write(std::stringstream os, std::vector<(int,std::allocator<(int)>)> Vec) -> std::stringstream
    """
  return _pyMOOS.Write(*args)

def MOOSChomp(*args):
  """
    MOOSChomp(string sStr, string sTk = ",", bool bInsensitive = False) -> string
    MOOSChomp(string sStr, string sTk = ",") -> string
    MOOSChomp(string sStr) -> string
    """
  return _pyMOOS.MOOSChomp(*args)

def MOOSPause(*args):
  """
    MOOSPause(int nMS, bool bApplyTimeWarping = True)
    MOOSPause(int nMS)
    """
  return _pyMOOS.MOOSPause(*args)

def MOOSTime(bApplyTimeWarping = True):
  """
    MOOSTime(bool bApplyTimeWarping = True) -> double
    MOOSTime() -> double
    """
  return _pyMOOS.MOOSTime(bApplyTimeWarping)

def HPMOOSTime(bApplyTimeWarping = True):
  """
    HPMOOSTime(bool bApplyTimeWarping = True) -> double
    HPMOOSTime() -> double
    """
  return _pyMOOS.HPMOOSTime(bApplyTimeWarping)

def MOOSLocalTime(bApplyTimeWarping = True):
  """
    MOOSLocalTime(bool bApplyTimeWarping = True) -> double
    MOOSLocalTime() -> double
    """
  return _pyMOOS.MOOSLocalTime(bApplyTimeWarping)

def MOOSTrace(*args):
  """
    MOOSTrace(string Str)
    MOOSTrace(char FmtStr, v(...) *args)
    """
  return _pyMOOS.MOOSTrace(*args)

def InhibitMOOSTraceInThisThread(bInhibit = True):
  """
    InhibitMOOSTraceInThisThread(bool bInhibit = True)
    InhibitMOOSTraceInThisThread()
    """
  return _pyMOOS.InhibitMOOSTraceInThisThread(bInhibit)

def GetDirectoryContents(*args):
  """
    GetDirectoryContents(string sPath, std::list<(std::string,std::allocator<(std::string)>)> sContents, 
        bool bFiles = True) -> bool
    GetDirectoryContents(string sPath, std::list<(std::string,std::allocator<(std::string)>)> sContents) -> bool
    """
  return _pyMOOS.GetDirectoryContents(*args)

def CMOOSFileReader_GetTokenValPair(*args):
  """
    GetTokenValPair(string sLine, string sTok, string sVal, bool bPreserveWhiteSpace = False) -> bool
    CMOOSFileReader_GetTokenValPair(string sLine, string sTok, string sVal) -> bool
    """
  return _pyMOOS.CMOOSFileReader_GetTokenValPair(*args)

class CProcessConfigReader(CMOOSFileReader):
    """Proxy of C++ CProcessConfigReader class"""
    __swig_setmethods__ = {}
    for _s in [CMOOSFileReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProcessConfigReader, name, value)
    __swig_getmethods__ = {}
    for _s in [CMOOSFileReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CProcessConfigReader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CProcessConfigReader"""
        this = _pyMOOS.new_CProcessConfigReader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMOOS.delete_CProcessConfigReader
    __del__ = lambda self : None;
    def GetAppName(self):
        """GetAppName(self) -> string"""
        return _pyMOOS.CProcessConfigReader_GetAppName(self)

    def GetFileName(self):
        """GetFileName(self) -> string"""
        return _pyMOOS.CProcessConfigReader_GetFileName(self)

    def SetAppName(self, *args):
        """SetAppName(self, string sAppName)"""
        return _pyMOOS.CProcessConfigReader_SetAppName(self, *args)

    def GetConfigurationParam(self, *args):
        """
        GetConfigurationParam(self, string sAppName, string sParam, string sVal) -> bool
        GetConfigurationParam(self, string sAppName, string sParam, double dfVal) -> bool
        GetConfigurationParam(self, string sAppName, string sParam, float fVal) -> bool
        GetConfigurationParam(self, string sAppName, string sParam, bool bVal) -> bool
        GetConfigurationParam(self, string sAppName, string sParam, int nVal) -> bool
        GetConfigurationParam(self, string sAppName, string sParam, unsigned int nVal) -> bool
        GetConfigurationParam(self, string sParam, string sVal) -> bool
        GetConfigurationParam(self, string sParam, double dfVal) -> bool
        GetConfigurationParam(self, string sParam, float fVal) -> bool
        GetConfigurationParam(self, string sParam, bool bVal) -> bool
        GetConfigurationParam(self, string sParam, int nVal) -> bool
        GetConfigurationParam(self, string sParam, unsigned int nVal) -> bool
        GetConfigurationParam(self, string sParam, std::vector<(double,std::allocator<(double)>)> Vec, 
            int nRows, int nCols) -> bool
        """
        return _pyMOOS.CProcessConfigReader_GetConfigurationParam(self, *args)

    def GetConfiguration(self, *args):
        """GetConfiguration(self, string sAppName, STRING_LIST Params) -> bool"""
        return _pyMOOS.CProcessConfigReader_GetConfiguration(self, *args)

    __swig_setmethods__["m_sAppName"] = _pyMOOS.CProcessConfigReader_m_sAppName_set
    __swig_getmethods__["m_sAppName"] = _pyMOOS.CProcessConfigReader_m_sAppName_get
    if _newclass:m_sAppName = _swig_property(_pyMOOS.CProcessConfigReader_m_sAppName_get, _pyMOOS.CProcessConfigReader_m_sAppName_set)
CProcessConfigReader_swigregister = _pyMOOS.CProcessConfigReader_swigregister
CProcessConfigReader_swigregister(CProcessConfigReader)


def SetMOOSPlayBack(*args):
  """SetMOOSPlayBack(bool bPlayBack)"""
  return _pyMOOS.SetMOOSPlayBack(*args)

def IsMOOSPlayBack():
  """IsMOOSPlayBack() -> bool"""
  return _pyMOOS.IsMOOSPlayBack()
MOOS_NOTIFY = _pyMOOS.MOOS_NOTIFY
MOOS_REGISTER = _pyMOOS.MOOS_REGISTER
MOOS_UNREGISTER = _pyMOOS.MOOS_UNREGISTER
MOOS_NOT_SET = _pyMOOS.MOOS_NOT_SET
MOOS_COMMAND = _pyMOOS.MOOS_COMMAND
MOOS_ANONYMOUS = _pyMOOS.MOOS_ANONYMOUS
MOOS_NULL_MSG = _pyMOOS.MOOS_NULL_MSG
MOOS_DATA = _pyMOOS.MOOS_DATA
MOOS_POISON = _pyMOOS.MOOS_POISON
MOOS_WELCOME = _pyMOOS.MOOS_WELCOME
MOOS_SERVER_REQUEST = _pyMOOS.MOOS_SERVER_REQUEST
MOOS_DOUBLE = _pyMOOS.MOOS_DOUBLE
MOOS_STRING = _pyMOOS.MOOS_STRING
SKEW_TOLERANCE = _pyMOOS.SKEW_TOLERANCE
class CMOOSMsg(_object):
    """Proxy of C++ CMOOSMsg class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMOOSMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMOOSMsg, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyMOOS.delete_CMOOSMsg
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> CMOOSMsg
        __init__(self, char cMsgType, string sKey, double dfVal, double dfTime = -1) -> CMOOSMsg
        __init__(self, char cMsgType, string sKey, double dfVal) -> CMOOSMsg
        __init__(self, char cMsgType, string sKey, string sVal, double dfTime = -1) -> CMOOSMsg
        __init__(self, char cMsgType, string sKey, string sVal) -> CMOOSMsg
        """
        this = _pyMOOS.new_CMOOSMsg(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsDataType(self, *args):
        """IsDataType(self, char cDataType) -> bool"""
        return _pyMOOS.CMOOSMsg_IsDataType(self, *args)

    def IsDouble(self):
        """IsDouble(self) -> bool"""
        return _pyMOOS.CMOOSMsg_IsDouble(self)

    def IsString(self):
        """IsString(self) -> bool"""
        return _pyMOOS.CMOOSMsg_IsString(self)

    def IsSkewed(self, *args):
        """
        IsSkewed(self, double dfTimeNow, double pdfSkew = None) -> bool
        IsSkewed(self, double dfTimeNow) -> bool
        """
        return _pyMOOS.CMOOSMsg_IsSkewed(self, *args)

    def IsYoungerThan(self, *args):
        """IsYoungerThan(self, double dfAge) -> bool"""
        return _pyMOOS.CMOOSMsg_IsYoungerThan(self, *args)

    def IsType(self, *args):
        """IsType(self, char cType) -> bool"""
        return _pyMOOS.CMOOSMsg_IsType(self, *args)

    def GetTime(self):
        """GetTime(self) -> double"""
        return _pyMOOS.CMOOSMsg_GetTime(self)

    def GetDouble(self):
        """GetDouble(self) -> double"""
        return _pyMOOS.CMOOSMsg_GetDouble(self)

    def GetString(self):
        """GetString(self) -> string"""
        return _pyMOOS.CMOOSMsg_GetString(self)

    def GetKey(self):
        """GetKey(self) -> string"""
        return _pyMOOS.CMOOSMsg_GetKey(self)

    def GetName(self):
        """GetName(self) -> string"""
        return _pyMOOS.CMOOSMsg_GetName(self)

    def GetSource(self):
        """GetSource(self) -> string"""
        return _pyMOOS.CMOOSMsg_GetSource(self)

    def GetSourceAux(self):
        """GetSourceAux(self) -> string"""
        return _pyMOOS.CMOOSMsg_GetSourceAux(self)

    def SetSourceAux(self, *args):
        """SetSourceAux(self, string sSrcAux)"""
        return _pyMOOS.CMOOSMsg_SetSourceAux(self, *args)

    def GetCommunity(self):
        """GetCommunity(self) -> string"""
        return _pyMOOS.CMOOSMsg_GetCommunity(self)

    def GetAsString(self, nFieldWidth = 12, nNumDP = 5):
        """
        GetAsString(self, int nFieldWidth = 12, int nNumDP = 5) -> string
        GetAsString(self, int nFieldWidth = 12) -> string
        GetAsString(self) -> string
        """
        return _pyMOOS.CMOOSMsg_GetAsString(self, nFieldWidth, nNumDP)

    def Trace(self):
        """Trace(self)"""
        return _pyMOOS.CMOOSMsg_Trace(self)

    def SetDouble(self, *args):
        """SetDouble(self, double dfD)"""
        return _pyMOOS.CMOOSMsg_SetDouble(self, *args)

    __swig_setmethods__["m_cMsgType"] = _pyMOOS.CMOOSMsg_m_cMsgType_set
    __swig_getmethods__["m_cMsgType"] = _pyMOOS.CMOOSMsg_m_cMsgType_get
    if _newclass:m_cMsgType = _swig_property(_pyMOOS.CMOOSMsg_m_cMsgType_get, _pyMOOS.CMOOSMsg_m_cMsgType_set)
    __swig_setmethods__["m_cDataType"] = _pyMOOS.CMOOSMsg_m_cDataType_set
    __swig_getmethods__["m_cDataType"] = _pyMOOS.CMOOSMsg_m_cDataType_get
    if _newclass:m_cDataType = _swig_property(_pyMOOS.CMOOSMsg_m_cDataType_get, _pyMOOS.CMOOSMsg_m_cDataType_set)
    __swig_setmethods__["m_sKey"] = _pyMOOS.CMOOSMsg_m_sKey_set
    __swig_getmethods__["m_sKey"] = _pyMOOS.CMOOSMsg_m_sKey_get
    if _newclass:m_sKey = _swig_property(_pyMOOS.CMOOSMsg_m_sKey_get, _pyMOOS.CMOOSMsg_m_sKey_set)
    __swig_setmethods__["m_nID"] = _pyMOOS.CMOOSMsg_m_nID_set
    __swig_getmethods__["m_nID"] = _pyMOOS.CMOOSMsg_m_nID_get
    if _newclass:m_nID = _swig_property(_pyMOOS.CMOOSMsg_m_nID_get, _pyMOOS.CMOOSMsg_m_nID_set)
    __swig_setmethods__["m_dfTime"] = _pyMOOS.CMOOSMsg_m_dfTime_set
    __swig_getmethods__["m_dfTime"] = _pyMOOS.CMOOSMsg_m_dfTime_get
    if _newclass:m_dfTime = _swig_property(_pyMOOS.CMOOSMsg_m_dfTime_get, _pyMOOS.CMOOSMsg_m_dfTime_set)
    __swig_setmethods__["m_dfVal"] = _pyMOOS.CMOOSMsg_m_dfVal_set
    __swig_getmethods__["m_dfVal"] = _pyMOOS.CMOOSMsg_m_dfVal_get
    if _newclass:m_dfVal = _swig_property(_pyMOOS.CMOOSMsg_m_dfVal_get, _pyMOOS.CMOOSMsg_m_dfVal_set)
    __swig_setmethods__["m_dfVal2"] = _pyMOOS.CMOOSMsg_m_dfVal2_set
    __swig_getmethods__["m_dfVal2"] = _pyMOOS.CMOOSMsg_m_dfVal2_get
    if _newclass:m_dfVal2 = _swig_property(_pyMOOS.CMOOSMsg_m_dfVal2_get, _pyMOOS.CMOOSMsg_m_dfVal2_set)
    __swig_setmethods__["m_sVal"] = _pyMOOS.CMOOSMsg_m_sVal_set
    __swig_getmethods__["m_sVal"] = _pyMOOS.CMOOSMsg_m_sVal_get
    if _newclass:m_sVal = _swig_property(_pyMOOS.CMOOSMsg_m_sVal_get, _pyMOOS.CMOOSMsg_m_sVal_set)
    __swig_setmethods__["m_sSrc"] = _pyMOOS.CMOOSMsg_m_sSrc_set
    __swig_getmethods__["m_sSrc"] = _pyMOOS.CMOOSMsg_m_sSrc_get
    if _newclass:m_sSrc = _swig_property(_pyMOOS.CMOOSMsg_m_sSrc_get, _pyMOOS.CMOOSMsg_m_sSrc_set)
    __swig_setmethods__["m_sSrcAux"] = _pyMOOS.CMOOSMsg_m_sSrcAux_set
    __swig_getmethods__["m_sSrcAux"] = _pyMOOS.CMOOSMsg_m_sSrcAux_get
    if _newclass:m_sSrcAux = _swig_property(_pyMOOS.CMOOSMsg_m_sSrcAux_get, _pyMOOS.CMOOSMsg_m_sSrcAux_set)
    __swig_setmethods__["m_sOriginatingCommunity"] = _pyMOOS.CMOOSMsg_m_sOriginatingCommunity_set
    __swig_getmethods__["m_sOriginatingCommunity"] = _pyMOOS.CMOOSMsg_m_sOriginatingCommunity_get
    if _newclass:m_sOriginatingCommunity = _swig_property(_pyMOOS.CMOOSMsg_m_sOriginatingCommunity_get, _pyMOOS.CMOOSMsg_m_sOriginatingCommunity_set)
    def Serialize(self, *args):
        """
        Serialize(self, unsigned char pBuffer, int nLen, bool bToStream = True) -> int
        Serialize(self, unsigned char pBuffer, int nLen) -> int
        """
        return _pyMOOS.CMOOSMsg_Serialize(self, *args)

    def __lt__(self, *args):
        """__lt__(self, CMOOSMsg Msg) -> bool"""
        return _pyMOOS.CMOOSMsg___lt__(self, *args)

CMOOSMsg_swigregister = _pyMOOS.CMOOSMsg_swigregister
CMOOSMsg_swigregister(CMOOSMsg)

class CMOOSCommObject(_object):
    """Proxy of C++ CMOOSCommObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMOOSCommObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMOOSCommObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CMOOSCommObject"""
        this = _pyMOOS.new_CMOOSCommObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMOOS.delete_CMOOSCommObject
    __del__ = lambda self : None;
    def SocketsInit():
        """SocketsInit() -> bool"""
        return _pyMOOS.CMOOSCommObject_SocketsInit()

    if _newclass:SocketsInit = staticmethod(SocketsInit)
    __swig_getmethods__["SocketsInit"] = lambda x: SocketsInit
CMOOSCommObject_swigregister = _pyMOOS.CMOOSCommObject_swigregister
CMOOSCommObject_swigregister(CMOOSCommObject)

def CMOOSCommObject_SocketsInit():
  """CMOOSCommObject_SocketsInit() -> bool"""
  return _pyMOOS.CMOOSCommObject_SocketsInit()

OUTBOX_PENDING_LIMIT = _pyMOOS.OUTBOX_PENDING_LIMIT
INBOX_PENDING_LIMIT = _pyMOOS.INBOX_PENDING_LIMIT
CLIENT_DEFAULT_FUNDAMENTAL_FREQ = _pyMOOS.CLIENT_DEFAULT_FUNDAMENTAL_FREQ
CLIENT_MAX_FUNDAMENTAL_FREQ = _pyMOOS.CLIENT_MAX_FUNDAMENTAL_FREQ
class CMOOSCommClient(CMOOSCommObject):
    """Proxy of C++ CMOOSCommClient class"""
    __swig_setmethods__ = {}
    for _s in [CMOOSCommObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMOOSCommClient, name, value)
    __swig_getmethods__ = {}
    for _s in [CMOOSCommObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMOOSCommClient, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CMOOSCommClient"""
        this = _pyMOOS.new_CMOOSCommClient()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMOOS.delete_CMOOSCommClient
    __del__ = lambda self : None;
    def Notify(self, *args):
        """
        Notify(self, string sVar, string sVal, double dfTime = -1) -> bool
        Notify(self, string sVar, string sVal) -> bool
        Notify(self, string sVar, string sVal, string sSrcAux, double dfTime = -1) -> bool
        Notify(self, string sVar, string sVal, string sSrcAux) -> bool
        Notify(self, string sVar, double dfVal, double dfTime = -1) -> bool
        Notify(self, string sVar, double dfVal) -> bool
        Notify(self, string sVar, double dfVal, string sSrcAux, double dfTime = -1) -> bool
        Notify(self, string sVar, double dfVal, string sSrcAux) -> bool
        """
        return _pyMOOS.CMOOSCommClient_Notify(self, *args)

    def Register(self, *args):
        """Register(self, string sVar, double dfInterval) -> bool"""
        return _pyMOOS.CMOOSCommClient_Register(self, *args)

    def UnRegister(self, *args):
        """UnRegister(self, string sVar) -> bool"""
        return _pyMOOS.CMOOSCommClient_UnRegister(self, *args)

    def IsConnected(self):
        """IsConnected(self) -> bool"""
        return _pyMOOS.CMOOSCommClient_IsConnected(self)

    def Fetch(self, *args):
        """Fetch(self, MOOSMSG_LIST MsgList) -> bool"""
        return _pyMOOS.CMOOSCommClient_Fetch(self, *args)

    def Post(self, *args):
        """Post(self, CMOOSMsg Msg) -> bool"""
        return _pyMOOS.CMOOSCommClient_Post(self, *args)

    def ClientLoop(self):
        """ClientLoop(self) -> bool"""
        return _pyMOOS.CMOOSCommClient_ClientLoop(self)

    def DoClientWork(self):
        """DoClientWork(self) -> bool"""
        return _pyMOOS.CMOOSCommClient_DoClientWork(self)

    def Run(self, *args):
        """
        Run(self, char sServer, long lPort, char sMyName, unsigned int nFundamentalFreq = 5) -> bool
        Run(self, char sServer, long lPort, char sMyName) -> bool
        """
        return _pyMOOS.CMOOSCommClient_Run(self, *args)

    def SetOnConnectCallBack(self, *args):
        """SetOnConnectCallBack(self, bool pfn, void pCallerParam)"""
        return _pyMOOS.CMOOSCommClient_SetOnConnectCallBack(self, *args)

    def SetOnDisconnectCallBack(self, *args):
        """SetOnDisconnectCallBack(self, bool pfn, void pCallerParam)"""
        return _pyMOOS.CMOOSCommClient_SetOnDisconnectCallBack(self, *args)

    def SetOnMailCallBack(self, *args):
        """SetOnMailCallBack(self, bool pfn, void pCallerParam)"""
        return _pyMOOS.CMOOSCommClient_SetOnMailCallBack(self, *args)

    def HasMailCallBack(self):
        """HasMailCallBack(self) -> bool"""
        return _pyMOOS.CMOOSCommClient_HasMailCallBack(self)

    def ServerRequest(self, *args):
        """
        ServerRequest(self, string sWhat, MOOSMSG_LIST MsgList, double dfTimeOut = 2.0, 
            bool bContinuouslyClearBox = True) -> bool
        ServerRequest(self, string sWhat, MOOSMSG_LIST MsgList, double dfTimeOut = 2.0) -> bool
        ServerRequest(self, string sWhat, MOOSMSG_LIST MsgList) -> bool
        """
        return _pyMOOS.CMOOSCommClient_ServerRequest(self, *args)

    def PeekMail(*args):
        """
        PeekMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False, 
            bool bFindYoungest = False) -> bool
        PeekMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False) -> bool
        PeekMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg) -> bool
        """
        return _pyMOOS.CMOOSCommClient_PeekMail(*args)

    if _newclass:PeekMail = staticmethod(PeekMail)
    __swig_getmethods__["PeekMail"] = lambda x: PeekMail
    def PeekAndCheckMail(*args):
        """
        PeekAndCheckMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False, 
            bool bFindYoungest = False) -> bool
        PeekAndCheckMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False) -> bool
        PeekAndCheckMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg) -> bool
        """
        return _pyMOOS.CMOOSCommClient_PeekAndCheckMail(*args)

    if _newclass:PeekAndCheckMail = staticmethod(PeekAndCheckMail)
    __swig_getmethods__["PeekAndCheckMail"] = lambda x: PeekAndCheckMail
    def Peek(self, *args):
        """
        Peek(self, MOOSMSG_LIST List, int nIDRequired, bool bClearBox = True) -> bool
        Peek(self, MOOSMSG_LIST List, int nIDRequired) -> bool
        """
        return _pyMOOS.CMOOSCommClient_Peek(self, *args)

    def GetLocalIPAddress():
        """GetLocalIPAddress() -> string"""
        return _pyMOOS.CMOOSCommClient_GetLocalIPAddress()

    if _newclass:GetLocalIPAddress = staticmethod(GetLocalIPAddress)
    __swig_getmethods__["GetLocalIPAddress"] = lambda x: GetLocalIPAddress
    def GetDescription(self):
        """GetDescription(self) -> string"""
        return _pyMOOS.CMOOSCommClient_GetDescription(self)

    def FakeSource(self, *args):
        """FakeSource(self, bool bFake) -> bool"""
        return _pyMOOS.CMOOSCommClient_FakeSource(self, *args)

    def Close(self, bNice = True):
        """
        Close(self, bool bNice = True) -> bool
        Close(self) -> bool
        """
        return _pyMOOS.CMOOSCommClient_Close(self, bNice)

    def GetPublished(self):
        """GetPublished(self) -> std::set<(std::string)>"""
        return _pyMOOS.CMOOSCommClient_GetPublished(self)

    def IsRegisteredFor(self, *args):
        """IsRegisteredFor(self, string sVariable) -> bool"""
        return _pyMOOS.CMOOSCommClient_IsRegisteredFor(self, *args)

    def GetRegistered(self):
        """GetRegistered(self) -> std::set<(std::string)>"""
        return _pyMOOS.CMOOSCommClient_GetRegistered(self)

    def SetQuiet(self, *args):
        """SetQuiet(self, bool bQ)"""
        return _pyMOOS.CMOOSCommClient_SetQuiet(self, *args)

    def DoLocalTimeCorrection(self, *args):
        """DoLocalTimeCorrection(self, bool b)"""
        return _pyMOOS.CMOOSCommClient_DoLocalTimeCorrection(self, *args)

    def SetVerboseDebug(self, *args):
        """SetVerboseDebug(self, bool bT)"""
        return _pyMOOS.CMOOSCommClient_SetVerboseDebug(self, *args)

    def SetCommsTick(self, *args):
        """SetCommsTick(self, int nCommsTick) -> bool"""
        return _pyMOOS.CMOOSCommClient_SetCommsTick(self, *args)

CMOOSCommClient_swigregister = _pyMOOS.CMOOSCommClient_swigregister
CMOOSCommClient_swigregister(CMOOSCommClient)

def CMOOSCommClient_PeekMail(*args):
  """
    PeekMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False, 
        bool bFindYoungest = False) -> bool
    PeekMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False) -> bool
    CMOOSCommClient_PeekMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg) -> bool
    """
  return _pyMOOS.CMOOSCommClient_PeekMail(*args)

def CMOOSCommClient_PeekAndCheckMail(*args):
  """
    PeekAndCheckMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False, 
        bool bFindYoungest = False) -> bool
    PeekAndCheckMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg, bool bErase = False) -> bool
    CMOOSCommClient_PeekAndCheckMail(MOOSMSG_LIST Mail, string sKey, CMOOSMsg Msg) -> bool
    """
  return _pyMOOS.CMOOSCommClient_PeekAndCheckMail(*args)

def CMOOSCommClient_GetLocalIPAddress():
  """CMOOSCommClient_GetLocalIPAddress() -> string"""
  return _pyMOOS.CMOOSCommClient_GetLocalIPAddress()

MOOS_PKT_DEFAULT_SPACE = _pyMOOS.MOOS_PKT_DEFAULT_SPACE
class CMOOSCommPkt(_object):
    """Proxy of C++ CMOOSCommPkt class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMOOSCommPkt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMOOSCommPkt, name)
    __repr__ = _swig_repr
    def Serialize(self, *args):
        """
        Serialize(self, MOOSMSG_LIST List, bool bToStream = True, bool bNoNULL = False, 
            double pdfPktTime = None) -> bool
        Serialize(self, MOOSMSG_LIST List, bool bToStream = True, bool bNoNULL = False) -> bool
        Serialize(self, MOOSMSG_LIST List, bool bToStream = True) -> bool
        Serialize(self, MOOSMSG_LIST List) -> bool
        """
        return _pyMOOS.CMOOSCommPkt_Serialize(self, *args)

    def GetStreamLength(self):
        """GetStreamLength(self) -> int"""
        return _pyMOOS.CMOOSCommPkt_GetStreamLength(self)

    def Fill(self, *args):
        """Fill(self, unsigned char InData, int nData) -> bool"""
        return _pyMOOS.CMOOSCommPkt_Fill(self, *args)

    def GetBytesRequired(self):
        """GetBytesRequired(self) -> int"""
        return _pyMOOS.CMOOSCommPkt_GetBytesRequired(self)

    def __init__(self): 
        """__init__(self) -> CMOOSCommPkt"""
        this = _pyMOOS.new_CMOOSCommPkt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMOOS.delete_CMOOSCommPkt
    __del__ = lambda self : None;
    __swig_setmethods__["m_pStream"] = _pyMOOS.CMOOSCommPkt_m_pStream_set
    __swig_getmethods__["m_pStream"] = _pyMOOS.CMOOSCommPkt_m_pStream_get
    if _newclass:m_pStream = _swig_property(_pyMOOS.CMOOSCommPkt_m_pStream_get, _pyMOOS.CMOOSCommPkt_m_pStream_set)
    __swig_setmethods__["m_pNextData"] = _pyMOOS.CMOOSCommPkt_m_pNextData_set
    __swig_getmethods__["m_pNextData"] = _pyMOOS.CMOOSCommPkt_m_pNextData_get
    if _newclass:m_pNextData = _swig_property(_pyMOOS.CMOOSCommPkt_m_pNextData_get, _pyMOOS.CMOOSCommPkt_m_pNextData_set)
    __swig_setmethods__["m_nStreamSpace"] = _pyMOOS.CMOOSCommPkt_m_nStreamSpace_set
    __swig_getmethods__["m_nStreamSpace"] = _pyMOOS.CMOOSCommPkt_m_nStreamSpace_get
    if _newclass:m_nStreamSpace = _swig_property(_pyMOOS.CMOOSCommPkt_m_nStreamSpace_get, _pyMOOS.CMOOSCommPkt_m_nStreamSpace_set)
    __swig_setmethods__["DefaultStream"] = _pyMOOS.CMOOSCommPkt_DefaultStream_set
    __swig_getmethods__["DefaultStream"] = _pyMOOS.CMOOSCommPkt_DefaultStream_get
    if _newclass:DefaultStream = _swig_property(_pyMOOS.CMOOSCommPkt_DefaultStream_get, _pyMOOS.CMOOSCommPkt_DefaultStream_set)
CMOOSCommPkt_swigregister = _pyMOOS.CMOOSCommPkt_swigregister
CMOOSCommPkt_swigregister(CMOOSCommPkt)

DEFAULT_MOOS_APP_COMMS_FREQ = _pyMOOS.DEFAULT_MOOS_APP_COMMS_FREQ
DEFAULT_MOOS_APP_FREQ = _pyMOOS.DEFAULT_MOOS_APP_FREQ
MOOS_MAX_APP_FREQ = _pyMOOS.MOOS_MAX_APP_FREQ
MOOS_MAX_COMMS_FREQ = _pyMOOS.MOOS_MAX_COMMS_FREQ
STATUS_PERIOD = _pyMOOS.STATUS_PERIOD
class CMOOSApp(_object):
    """Proxy of C++ CMOOSApp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMOOSApp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMOOSApp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CMOOSApp"""
        if self.__class__ == CMOOSApp:
            _self = None
        else:
            _self = self
        this = _pyMOOS.new_CMOOSApp(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyMOOS.delete_CMOOSApp
    __del__ = lambda self : None;
    def Run(self, *args):
        """
        Run(self, char sName, char sMissionFile, char sSubscribeName) -> bool
        Run(self, char sName, char sMissionFile) -> bool
        """
        return _pyMOOS.CMOOSApp_Run(self, *args)

    def OnConnectToServer(self):
        """OnConnectToServer(self) -> bool"""
        return _pyMOOS.CMOOSApp_OnConnectToServer(self)

    def OnDisconnectFromServer(self):
        """OnDisconnectFromServer(self) -> bool"""
        return _pyMOOS.CMOOSApp_OnDisconnectFromServer(self)

    def RequestQuit(self):
        """RequestQuit(self) -> bool"""
        return _pyMOOS.CMOOSApp_RequestQuit(self)

    def Iterate(self):
        """Iterate(self) -> bool"""
        return _pyMOOS.CMOOSApp_Iterate(self)

    def OnNewMail(self, *args):
        """OnNewMail(self, MOOSMSG_LIST NewMail) -> bool"""
        return _pyMOOS.CMOOSApp_OnNewMail(self, *args)

    def OnCommandMsg(self, *args):
        """OnCommandMsg(self, CMOOSMsg Msg) -> bool"""
        return _pyMOOS.CMOOSApp_OnCommandMsg(self, *args)

    def MakeStatusString(self):
        """MakeStatusString(self) -> string"""
        return _pyMOOS.CMOOSApp_MakeStatusString(self)

    def OnStartUp(self):
        """OnStartUp(self) -> bool"""
        return _pyMOOS.CMOOSApp_OnStartUp(self)

    def ConfigureComms(self):
        """ConfigureComms(self) -> bool"""
        return _pyMOOS.CMOOSApp_ConfigureComms(self)

    def OnDisconnectToServerPrivate(self):
        """OnDisconnectToServerPrivate(self)"""
        return _pyMOOS.CMOOSApp_OnDisconnectToServerPrivate(self)

    def OnConnectToServerPrivate(self):
        """OnConnectToServerPrivate(self)"""
        return _pyMOOS.CMOOSApp_OnConnectToServerPrivate(self)

    def OnMailCallBack(self):
        """OnMailCallBack(self) -> bool"""
        return _pyMOOS.CMOOSApp_OnMailCallBack(self)

    def UseMailCallBack(self):
        """UseMailCallBack(self) -> bool"""
        return _pyMOOS.CMOOSApp_UseMailCallBack(self)

    def __disown__(self):
        self.this.disown()
        _pyMOOS.disown_CMOOSApp(self)
        return weakref_proxy(self)
CMOOSApp_swigregister = _pyMOOS.CMOOSApp_swigregister
CMOOSApp_swigregister(CMOOSApp)



